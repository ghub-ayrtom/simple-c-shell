// Директива #ifndef (if not define) предназначена для защиты от многократного объявления при наличии сложной иерархии включаемых файлов -
// если данный заголовочный файл myshell.h уже был включён где-то раньше, то и константа SHELL_H была определена, а это значит, что все объявления до #endif будут пропущены
#ifndef SHELL_H

#include "stdbool.h"
#include "sys/types.h"

#define SHELL_H
#define CONTINUE 1 // Команда для дальнейшего исполнения главного цикла do while командной оболочки
#define EXIT 0 // Команда для прерывания выполнения главного цикла программы

#define DEFAULT_BUFF_SIZE 16 // Длина массива строк (токенов) пользовательского ввода
#define MAX_DIRECTORY_PATH 1024 // Длина массива, в котором посимвольно хранится строка пути текущей рабочей директории cwd
#define TOKENS_DELIMITERS " \t" // Возможные разделители слов (токенов) в строке пользовательского ввода

// Bash colors
#define PRIMARY_COLOR "\033[92m" // Имя пользователя
#define SECONDARY_COLOR "\033[95m" // Рабочая директория
#define RESET_COLOR "\033[0m" // Цвет по умолчанию

typedef struct fg_task_t fg_task;
struct fg_task_t // Структура, характеризующая главный процесс командной оболочки
{
    pid_t pid; // Идентификатор (ID) процесса
    bool finished; // Состояние процесса
};

typedef struct bg_task_t bg_task;
struct bg_task_t // Структура, характеризующая фоновый процесс командной оболочки
{
    pid_t pid; // Идентификатор (ID) процесса
    bool finished; // Состояние процесса
    char command[DEFAULT_BUFF_SIZE]; // Команда для выполнения
};

typedef struct tasks_t tasks;
struct tasks_t // Вспомогательная структура, хранящая в себе все активные процессы программы
{
    fg_task foreground; // Информация о главном процессе
    bg_task* background; // Список фоновых процессов
    size_t iterator; // Итератор списка фоновых процессов
    size_t size; // Размер списка фоновых процессов
};

// Устанавливает такие переменные среды как SHELL и PARENT при запуске оболочки
void init_environ();

// Отображает имя пользователя и текущую рабочую директорию
void display();

// Считывает пользовательский ввод
char* readline();

// Разбивает полученную строку пользовательского ввода line на слова (токены) по разделителям из TOKENS_DELIMITERS
char** split(char* line);

// Вызывает определённые ниже функции в зависимости от значения аргумента args[0]
int execute(char** args);

// Меняет текущую рабочую директорию на директорию из args[1]
int cd(char** args);

// Очищает весь вывод командной оболочки
int clear();

// Вызывает функцию dir_print при необходимости перенаправляя вывод
int dir(char** args);

// Выводит файловое содержимое текущей рабочей директории, либо директории из args[1]
void dir_print(char** args);

// Выводит список переменных среды
int env();

// Выводит на экран строку из args[1]
int echo(char** args);

// Выводит информацию о командой оболочке и доступных в ней командах
int help();

// Ставит выполнение операций в командной оболочке на паузу до нажатия клавиши Enter
int pause();

// Завершает все активные процессы и закрывает командную оболочку
int quit();

// Выводит список всех процессов оболочки (как активных, так и завершённых)
int jobs();

// Выполняет введённые пользователем команды из массива строк (токенов) args
int launch(char** args);

// Задаёт характеристики главному процессу командной оболочки, такие как его идентификатор (ID) и состояние
void set_foreground(pid_t pid);

// Завершает главный процесс командной оболочки
void kill_foreground();

// Добавляет фоновый процесс в соответствующий список background структуры tasks
int add_background(pid_t pid, char* command);

// Отмечает процесс как выполненный (finished) после его завершения
void catch_finished_task();

// Позволяет перенаправить ввод-вывод, переопределив соответствующий дескриптор
void open_file_descriptor(int descriptor_type);

#endif
